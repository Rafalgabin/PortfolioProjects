-- 1. Treat the Nulls
-- 2. Treat the duplicates
-- 3. Populate missing rows
-- 4. Drop unneeded columns
-- 5. Split columns

SELECT * FROM netflix1.netflix1;

CREATE TABLE netflix1_stagging
LIKE netflix1;

SELECT
	*
FROM netflix1_stagging;

INSERT netflix1_stagging
SELECT	
	*
FROM netflix1;

SELECT
	*
FROM netflix1_stagging;

-- 1. 3.

SELECT
  sum(show_id IS NULL) 		AS show_id_nulls
  ,sum('type' IS NULL) 		AS type_nulls
  ,sum(title IS NULL) 		AS title_nulls
  ,sum(director IS NULL) 	AS director_nulls
  ,sum(cast IS NULL) 		AS cast_nulls
  ,sum(country IS NULL) 	AS country_nulls
  ,sum(date_added IS NULL) 	AS date_added_nulls
  ,sum(release_year IS NULL) 	AS release_year_nulls
  ,sum(rating IS NULL) 		AS rating_nulls
  ,sum(duration IS NULL) 	AS duration_nulls
  ,sum(listed_in IS NULL) 	AS listed_in_nulls
  ,sum(description IS NULL) 	AS description_nulls
FROM netflix1_stagging;

-- We have nulls in couple columns, lets treat them.

select
	*
FROM netflix1_stagging
WHERE director IS NULL;

-- Number of nulls in director column is large, I will populate it with use of cast column (just for training purposes and later for use in visualisations) even if I think populating it with use of cast column will make the results misleading.
-- The rest nulls I will change to 'Not Given'.


SELECT 
  n1.title AS title_with_null_director
  ,n1.director AS current_director
  ,n1.cast AS cast
  ,n2.director AS potential_director
FROM netflix1_stagging n1
JOIN netflix1_stagging n2 
  ON n1.cast = n2.cast
WHERE n1.director IS NULL
  AND n2.director IS NOT NULL;
    
SELECT
	*
FROM netflix1_stagging
WHERE title = 'Adhugo';

UPDATE netflix1_stagging n1
JOIN netflix1_stagging n2 
  ON n1.cast = n2.cast
SET n1.director = n2.director
WHERE n1.director IS NULL
  AND n2.director IS NOT NULL;
    
SELECT
	*
FROM netflix1_stagging
WHERE director IS NULL;

UPDATE netflix1_stagging
SET director = 'Not Given'
WHERE director IS NULL;

SELECT
	*
FROM netflix1_stagging
WHERE country IS NULL;

-- Similar action I will do with country column but based on director column.

SELECT
  n1.title AS title_with_null_country
  ,n1.country AS current_country
  ,n1.director AS director
  ,n2.country AS potential_country
FROM netflix1_stagging n1
JOIN netflix1_stagging n2 
  ON n1.director = n2.director
WHERE n1.country IS NULL
  AND n2.director IS NOT NULL;
    
UPDATE netflix1_stagging n1
JOIN netflix1_stagging n2 
  ON n1.director = n2.director
SET n1.country = n2.country
WHERE n1.country IS NULL
  AND n2.coutry IS NOT NULL;

SELECT
	*
FROM netflix1_stagging
WHERE cast IS NULL;

UPDATE netflix1_stagging
SET cast = 'Not Given'
WHERE cast IS NULL;

UPDATE netflix1_stagging 
SET country = 'Not Given'
WHERE country IS NULL;

SELECT
	*
FROM netflix1_stagging
WHERE date_added IS NULL;

DELETE
FROM netflix1_stagging
WHERE show_id IN ('s6067', 's6175', 's6796', 's6807', 's6902', 's7197', 's7255', 's7407', 's7848', 's8183');

SELECT
	*
FROM netflix1_stagging
WHERE rating IS NULL;

UPDATE netflix1_stagging 
SET rating = 'Unknown'
WHERE rating IS NULL;

SELECT
	*
FROM netflix1_stagging
WHERE duration IS NULL;

UPDATE netflix1_stagging 
SET duration = 'Unknown'
WHERE duration IS NULL;

-- 2.

SELECT
	*
FROM netflix1_stagging;

SELECT
	show_id
  ,ROW_NUMBER() OVER(PARTITION BY show_id)   AS row_num
FROM netflix1_stagging;

SELECT
	title
  ,ROW_NUMBER() OVER(PARTITION BY title)     AS row_num
FROM netflix1_stagging;

SELECT
	*
FROM netflix1_stagging
WHERE title LIKE 'Ar__';

SELECT
	*
FROM netflix1_stagging
WHERE title = 'DEATH NOTE';

SELECT
	*
FROM netflix1_stagging
WHERE title = 'Esperando La Carroza';

DELETE
FROM netflix1_stagging
WHERE show_id = 's304';

SELECT
	*
FROM netflix1_stagging
WHERE title IN ('FullMetal Alchemist', 'Love in a Puff', 'Sin senos sí hay paraíso', 'Verónica')
ORDER BY title;

DELETE
FROM netflix1_stagging
WHERE show_id IN ('s160', 's1271');

-- 4. 

SELECT
	*
FROM netflix1_stagging;

-- Column description is not needed for me.

ALTER TABLE netflix1_stagging
DROP COLUMN	description;

SELECT
	*
FROM netflix1_stagging;

ALTER TABLE netflix1_stagging
RENAME COLUMN listed_in TO Genre; 
-- As this column represents genre of movie or tv show.

-- Change date_added column, it was a string type and contains date.

SELECT
	date_added
	,STR_TO_DATE(date_added, '%M %d, %Y') AS newdate
FROM netflix1_stagging;

UPDATE netflix1_stagging
SET date_added = STR_TO_DATE(date_added, '%M %d, %Y');

ALTER TABLE netflix1_stagging
MODIFY COLUMN date_added DATE;

-- 4. Some rows in country column has multiple countries I need one country to make visualization clean. I will split country column and keep first country which would be the original country I presume.

SELECT 
	*
  ,SUBSTRING_INDEX(country, ',', 1) AS country1
FROM netflix1_stagging;

ALTER TABLE netflix1_stagging 
ADD country1 VARCHAR(32);

UPDATE netflix1_stagging 
SET country1 = SUBSTRING_INDEX(country, ',', 1);

SELECT 
	country1
FROM netflix1_stagging;

ALTER TABLE netflix1_stagging
DROP COLUMN country;

ALTER TABLE netflix1_stagging
RENAME COLUMN country1 TO country;

SELECT 
	*
FROM netflix1_stagging;

SELECT 
	*
  ,SUBSTRING_INDEX(Genre, ',', 1) AS Genre1
FROM netflix1_stagging;

SELECT 
  MAX(LENGTH(SUBSTRING_INDEX(Genre, ',', 1))) AS Genre1_max_length
FROM netflix1_stagging;

ALTER TABLE netflix1_stagging 
ADD Genre1 VARCHAR(32);

UPDATE netflix1_stagging 
SET Genre1 = SUBSTRING_INDEX(Genre, ',', 1);

SELECT 
	Genre1
FROM netflix1_stagging
limit 10;

ALTER TABLE netflix1_stagging
DROP COLUMN Genre;

ALTER TABLE netflix1_stagging
RENAME COLUMN Genre1 TO genre;

SELECT
	*
FROM netflix1_stagging;

SELECT
	distinct(genre)
FROM netflix1_stagging;

-- Additionally I wll create another table with information how many appearances had each actor from cast column.

SELECT 
  MAX(CHAR_LENGTH(cast) - CHAR_LENGTH(REPLACE(cast, ',', '')) + 1)   AS max_actors
FROM netflix1_stagging;

SELECT 
  actor
  ,COUNT(*)   AS appearances
FROM (
    SELECT 
      TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cast, ',', n.n), ',', -1))   AS actor
    FROM netflix1_stagging
    CROSS JOIN (SELECT 1 AS n UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 
    UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10
    UNION ALL SELECT 11 UNION ALL SELECT 12 UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15 
    UNION ALL SELECT 16 UNION ALL SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19 UNION ALL SELECT 20
    UNION ALL SELECT 21 UNION ALL SELECT 22 UNION ALL SELECT 23 UNION ALL SELECT 24 UNION ALL SELECT 25
    UNION ALL SELECT 26 UNION ALL SELECT 27 UNION ALL SELECT 28 UNION ALL SELECT 29 UNION ALL SELECT 30
    UNION ALL SELECT 31 UNION ALL SELECT 32 UNION ALL SELECT 33 UNION ALL SELECT 34 UNION ALL SELECT 35
    UNION ALL SELECT 36 UNION ALL SELECT 37 UNION ALL SELECT 38 UNION ALL SELECT 39 UNION ALL SELECT 40
    UNION ALL SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43 UNION ALL SELECT 44 UNION ALL SELECT 45
    UNION ALL SELECT 46 UNION ALL SELECT 47 UNION ALL SELECT 48 UNION ALL SELECT 49 UNION ALL SELECT 50) n
    WHERE CHAR_LENGTH(cast) - CHAR_LENGTH(REPLACE(cast, ',', '')) >= n.n - 1
) AS actor_list
GROUP BY actor
ORDER BY appearances DESC;

CREATE TABLE actor_appearances AS
SELECT 
  actor
  ,COUNT(*)   AS appearances
FROM (
    SELECT 
      TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cast, ',', n.n), ',', -1))   AS actor
    FROM netflix1_stagging
    CROSS JOIN (SELECT 1 AS n UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 
    UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10
    UNION ALL SELECT 11 UNION ALL SELECT 12 UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15 
    UNION ALL SELECT 16 UNION ALL SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19 UNION ALL SELECT 20
    UNION ALL SELECT 21 UNION ALL SELECT 22 UNION ALL SELECT 23 UNION ALL SELECT 24 UNION ALL SELECT 25
    UNION ALL SELECT 26 UNION ALL SELECT 27 UNION ALL SELECT 28 UNION ALL SELECT 29 UNION ALL SELECT 30
    UNION ALL SELECT 31 UNION ALL SELECT 32 UNION ALL SELECT 33 UNION ALL SELECT 34 UNION ALL SELECT 35
    UNION ALL SELECT 36 UNION ALL SELECT 37 UNION ALL SELECT 38 UNION ALL SELECT 39 UNION ALL SELECT 40
    UNION ALL SELECT 41 UNION ALL SELECT 42 UNION ALL SELECT 43 UNION ALL SELECT 44 UNION ALL SELECT 45
    UNION ALL SELECT 46 UNION ALL SELECT 47 UNION ALL SELECT 48 UNION ALL SELECT 49 UNION ALL SELECT 50) n
    WHERE CHAR_LENGTH(cast) - CHAR_LENGTH(REPLACE(cast, ',', '')) >= n.n - 1
) AS actor_list
GROUP BY actor
ORDER BY appearances DESC;

SELECT
	SUM(appearances <> 'Not Given')		as known_appearances
FROM actor_appearances;
